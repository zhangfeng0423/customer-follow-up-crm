/**
 * InlineFollowUpInput组件
 * 内联跟进记录输入组件，符合PRD设计规范的对话流式输入界面
 */

'use client'

import * as React from 'react'
import { useState, useCallback, useRef } from 'react'
import { Paperclip, Calendar, Send } from 'lucide-react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'

import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { Card } from '@/components/ui/card'
import { VoiceInput } from './VoiceInput'
import { FileUpload } from './FileUpload'
import { NextStepForm } from './NextStepForm'
import {
  FOLLOWUP_TYPE_LABELS,
  CreateFollowUpRequest,
} from '@/lib/types/followup'
import { FollowUpType } from '@/app/generated/prisma'
import { useToast } from '@/components/ui/use-toast'

/**
 * 表单验证Schema
 */
const followUpFormSchema = z.object({
  content: z.string().min(1, '请输入跟进内容').max(2000, '跟进内容不能超过2000字符'),
  followUpType: z.enum(['PHONE_CALL', 'MEETING', 'VISIT', 'BUSINESS_DINNER']),
})

/**
 * 表单数据类型
 */
type FollowUpFormData = z.infer<typeof followUpFormSchema>

/**
 * 内联跟进输入组件Props接口
 */
export interface InlineFollowUpInputProps {
  /** 客户ID */
  customerId: string
  /** 提交回调函数 */
  onSubmit: (data: CreateFollowUpRequest) => Promise<void>
  /** 是否禁用 */
  disabled?: boolean
  /** 自定义类名 */
  className?: string
  /** 是否自动聚焦输入框 */
  autoFocus?: boolean
}

/**
 * 内联跟进输入组件
 *
 * @param props 组件属性
 * @returns {JSX.Element} 内联跟进输入组件
 */
export function InlineFollowUpInput({
  customerId,
  onSubmit,
  disabled = false,
  className,
  autoFocus = false,
}: InlineFollowUpInputProps) {
  const [mounted, setMounted] = React.useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [showNextStep, setShowNextStep] = useState(false)
  const [nextStepData, setNextStepData] = useState<{ dueDate: string; notes: string } | null>(null)
  const [attachments, setAttachments] = useState<File[]>([])
  const [showFileUpload, setShowFileUpload] = useState(false)
  const { toast } = useToast()

  const formRef = useRef<HTMLFormElement>(null)
  const textareaRef = useRef<HTMLTextAreaElement>(null)

  // 避免服务端渲染不匹配
  React.useEffect(() => {
    setMounted(true)
  }, [])

  const {
    register,
    handleSubmit,
    setValue,
    watch,
    reset,
    formState: { errors, isValid },
  } = useForm<FollowUpFormData>({
    resolver: zodResolver(followUpFormSchema),
    defaultValues: {
      content: '',
      followUpType: 'PHONE_CALL',
    },
  })

  const watchedContent = watch('content')
  const watchedFollowUpType = watch('followUpType')

  /**
   * 处理语音识别结果
   */
  const handleVoiceTranscript = useCallback((transcript: string) => {
    const currentContent = watchedContent
    const newContent = currentContent ? `${currentContent}\n${transcript}` : transcript
    setValue('content', newContent, { shouldValidate: true })
  }, [watchedContent, setValue])

  /**
   * 自动聚焦输入框
   */
  React.useEffect(() => {
    if (mounted && autoFocus && !disabled && textareaRef.current) {
      // 使用 requestAnimationFrame 确保 DOM 完全渲染后执行聚焦
      const timer = setTimeout(() => {
        if (textareaRef.current) {
          textareaRef.current.focus()
          // 将光标移动到文本末尾
          const textLength = textareaRef.current.value.length
          textareaRef.current.setSelectionRange(textLength, textLength)
        }
      }, 100)

      return () => clearTimeout(timer)
    }
  }, [autoFocus, disabled, mounted])

  /**
   * 处理键盘事件，支持Ctrl/Cmd + Enter 提交
   */
  const handleKeyDown = React.useCallback((e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {
      e.preventDefault()
      formRef.current?.requestSubmit()
    }
  }, [])

  /**
   * 处理文件上传完成
   */
  const handleFilesUploaded = useCallback((files: File[]) => {
    setAttachments(files)
  }, [])

  /**
   * 处理下一步计划数据
   */
  const handleNextStepData = useCallback((data: { dueDate: string; notes: string }) => {
    // 保存下一步计划数据，在提交时使用
    setNextStepData(data)
    setShowNextStep(false)

    toast({
      title: '成功',
      description: '下一步计划已设置',
    })
  }, [toast])

  /**
   * 提交表单
   */
  const handleFormSubmit = useCallback(async (data: FollowUpFormData) => {
    if (!isValid || isSubmitting) return

    setIsSubmitting(true)

    try {
      // 上传附件
      const uploadedAttachments = []
      for (const file of attachments) {
        const formData = new FormData()
        formData.append('file', file)

        const uploadResponse = await fetch('/api/upload', {
          method: 'POST',
          body: formData,
        })

        if (!uploadResponse.ok) {
          throw new Error(`上传文件 ${file.name} 失败`)
        }

        const uploadResult = await uploadResponse.json()
        if (uploadResult.success && uploadResult.data) {
          uploadedAttachments.push(uploadResult.data)
        }
      }

      // 构建请求数据
      const requestData: CreateFollowUpRequest = {
        customerId,
        content: data.content,
        followUpType: data.followUpType,
        ...(uploadedAttachments.length > 0 && {
          attachments: uploadedAttachments,
        }),
        ...(nextStepData && {
          nextStep: {
            dueDate: nextStepData.dueDate,
            notes: nextStepData.notes,
          },
        }),
      }

      // 提交跟进记录
      await onSubmit(requestData)

      // 重置表单
      reset()
      setAttachments([])
      setShowFileUpload(false)
      setShowNextStep(false)
      setNextStepData(null)

      toast({
        title: '成功',
        description: '跟进记录已创建',
      })

    } catch (error) {
      console.error('提交跟进记录失败:', error)
      toast({
        title: '错误',
        description: error instanceof Error ? error.message : '提交失败，请稍后重试',
        variant: 'destructive',
      })
    } finally {
      setIsSubmitting(false)
    }
  }, [
    isValid,
    isSubmitting,
    customerId,
    attachments,
    nextStepData,
    onSubmit,
    reset,
    toast,
  ])

  return (
    <Card className={className}>
      <div className="p-4 space-y-4">
        {/* 主输入区域 */}
        <form ref={formRef} onSubmit={handleSubmit(handleFormSubmit)} className="space-y-4">
          <div className="space-y-4">
          {/* 下一步计划预览 */}
          {nextStepData && !showNextStep && (
            <div className="bg-green-50 border border-green-200 rounded-md p-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <Calendar className="h-4 w-4 text-green-600" />
                  <span className="text-sm text-green-700">
                    已设置下次跟进：{mounted ? new Date(nextStepData.dueDate).toLocaleString('zh-CN', {
                      month: 'numeric',
                      day: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    }) : '加载中...'}
                  </span>
                  {nextStepData.notes && (
                    <span className="text-xs text-green-600 max-w-xs truncate">
                      - {nextStepData.notes}
                    </span>
                  )}
                </div>
                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowNextStep(true)}
                  disabled={disabled || isSubmitting}
                  className="h-6 w-6 p-0 text-green-600 hover:text-green-700 hover:bg-green-100"
                >
                  <svg className="h-3 w-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                  </svg>
                </Button>
              </div>
            </div>
          )}

          {/* 文本输入框 */
          <div className="space-y-2">
            <Textarea
              ref={textareaRef}
              {...register('content')}
              onKeyDown={handleKeyDown}
              placeholder="记录今天的客户跟进情况..."
              className="min-h-[80px] resize-none border-0 bg-muted/50 focus:bg-background"
              disabled={disabled || isSubmitting}
            />
            {errors.content && (
              <p className="text-sm text-destructive">{errors.content.message}</p>
            )}
          </div>

          <div className="flex flex-wrap gap-2">
            {Object.entries(FOLLOWUP_TYPE_LABELS).map(([value, label]) => (
              <Button
                key={value}
                type="button"
                variant={watchedFollowUpType === value ? 'default' : 'outline'}
                size="sm"
                onClick={() => setValue('followUpType', value as FollowUpType, { shouldValidate: true })}
                disabled={disabled || isSubmitting}
                className="text-sm"
              >
                {label}
              </Button>
            ))}
          </div>

          {/* 功能按钮区域 */}
          <div className="flex items-center justify-between pt-2">
            <div className="flex items-center space-x-2">
              {/* 语音输入 */}
              <VoiceInput
                onTranscript={handleVoiceTranscript}
                disabled={disabled || isSubmitting}
              />

              {/* 文件上传 */}
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={() => setShowFileUpload(!showFileUpload)}
                disabled={disabled || isSubmitting}
                className="relative"
              >
                <Paperclip className="h-4 w-4" />
                {attachments.length > 0 && (
                  <span className="absolute -top-1 -right-1 h-4 w-4 bg-primary text-primary-foreground text-xs rounded-full flex items-center justify-center">
                    {attachments.length}
                  </span>
                )}
              </Button>

              {/* 下一步计划 */}
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={() => setShowNextStep(!showNextStep)}
                disabled={disabled || isSubmitting}
                className={showNextStep ? 'bg-primary text-primary-foreground' : nextStepData ? 'bg-green-100 text-green-700 hover:bg-green-200' : ''}
              >
                <Calendar className="h-4 w-4 mr-1" />
                下一步
                {nextStepData && (
                  <div className="ml-1 h-2 w-2 bg-green-600 rounded-full" />
                )}
              </Button>
            </div>

            {/* 提交按钮 */}
            <Button
              type="submit"
              disabled={!isValid || disabled || isSubmitting}
              className="min-w-[80px]"
            >
              {isSubmitting ? (
                <div className="flex items-center">
                  <div className="h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent mr-2" />
                  发布
                </div>
              ) : (
                <>
                  <Send className="h-4 w-4 mr-2" />
                  发布
                </>
              )}
            </Button>
          </div>
        </div>
        </form>

        {/* 文件上传区域 */}
        {showFileUpload && (
          <div className="border-t pt-4">
            <FileUpload
              files={attachments}
              onFilesChange={handleFilesUploaded}
              disabled={disabled || isSubmitting}
              maxFiles={3}
            />
          </div>
        )}

        {/* 下一步计划表单 */}
        {showNextStep && (
          <div className="border-t pt-4">
            <NextStepForm
              onSubmit={handleNextStepData}
              onCancel={() => setShowNextStep(false)}
              disabled={disabled || isSubmitting}
            />
          </div>
        )}
      </div>
    </Card>
  )
}